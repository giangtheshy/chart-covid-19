{"version":3,"sources":["components/Card.js","context.js","components/Cards.js","components/Chart.js","components/CountryPicker.js","App.js","index.js"],"names":["CardComponent","className","cardTitle","value","lastUpdate","cardSubtitle","Grid","item","xs","md","components","Card","cx","CardContent","Typography","color","gutterBottom","variant","component","start","end","duration","separator","Date","toDateString","url","AppContext","React","createContext","AppProvider","children","useState","data","setData","country","setCountry","listCountries","setListCountries","dailyData","setDailyData","fetchData","useCallback","a","tempUrl","fetch","response","json","confirmed","recovered","deaths","fetchCountries","countries","list","map","name","fetchDailyData","dataFetch","positive","death","date","dateChecked","useEffect","Provider","handleCountry","useGlobalContext","useContext","Cards","container","spacing","justify","Chart","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","reverse","borderColor","fill","CountryPicker","length","FormControl","NativeSelect","defaultValue","onChange","e","target","i","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2553408c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst CardComponent = ({ className, cardTitle, value, lastUpdate, cardSubtitle }) => {\r\n    return (\r\n        <Grid item xs={12} md={3} components={Card} className={cx(className)}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                    {cardTitle}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    <CountUp start={0} end={value} duration={2.75} separator=\",\" />\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    {cardSubtitle}\r\n                </Typography>\r\n            </CardContent>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useContext, useEffect, useState, useCallback } from \"react\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nconst AppContext = React.createContext();\r\nconst AppProvider = ({ children }) => {\r\n    const [data, setData] = useState({});\r\n    const [country, setCountry] = useState(\"\");\r\n    const [listCountries, setListCountries] = useState([]);\r\n    const [dailyData, setDailyData] = useState([]);\r\n    const fetchData = useCallback(async () => {\r\n        let tempUrl = url;\r\n        if (country) {\r\n            tempUrl = `${url}/countries/${country}`;\r\n        }\r\n        const response = await fetch(tempUrl);\r\n        const { confirmed, recovered, deaths, lastUpdate } = await response.json();\r\n        setData({ confirmed, recovered, deaths, lastUpdate });\r\n    }, [country]);\r\n    const fetchCountries = async () => {\r\n        const response = await fetch(`${url}/countries`);\r\n        const { countries } = await response.json();\r\n        const list = countries.map((country) => country.name);\r\n        setListCountries(list);\r\n    };\r\n    const fetchDailyData = async () => {\r\n        const response = await fetch(\"https://api.covidtracking.com/v1/us/daily.json\");\r\n        const dataFetch = await response.json();\r\n        const list = dataFetch.map(({ positive, recovered, death, dateChecked: date }) => ({\r\n            confirmed: positive,\r\n            recovered,\r\n            deaths: death,\r\n            date,\r\n        }));\r\n        setDailyData(list);\r\n    };\r\n    useEffect(() => {\r\n        fetchCountries();\r\n        fetchDailyData();\r\n    }, []);\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData]);\r\n    const handleCountry = (country) => {\r\n        setCountry(country);\r\n    };\r\n    return (\r\n        <AppContext.Provider value={{ data, listCountries, handleCountry, country, dailyData }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\nexport { AppProvider };\r\n","import React from \"react\";\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport CardComponent from \"./Card\";\r\nimport { useGlobalContext } from \"../context\";\r\nconst Cards = () => {\r\n    const { data } = useGlobalContext();\r\n    const { confirmed, recovered, deaths, lastUpdate } = data;\r\n    if (!confirmed) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    return (\r\n        <div className=\"cards-container\">\r\n            <Typography gutterBottom variant=\"h4\" component=\"h2\" className=\"cards-title\">\r\n                Global\r\n            </Typography>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <CardComponent\r\n                    cardTitle=\"Infected\"\r\n                    value={confirmed.value}\r\n                    lastUpdate={lastUpdate}\r\n                    cardSubtitle=\"Number of active cases from COVID-19.\"\r\n                    className=\"card-infected\"\r\n                />\r\n                <CardComponent\r\n                    cardTitle=\"Recovered\"\r\n                    value={recovered.value}\r\n                    lastUpdate={lastUpdate}\r\n                    cardSubtitle=\"Number of recoveries from COVID-19.\"\r\n                    className=\"card-recovered\"\r\n                />\r\n                <CardComponent\r\n                    cardTitle=\"Deaths\"\r\n                    value={deaths.value}\r\n                    lastUpdate={lastUpdate}\r\n                    cardSubtitle=\"Number of deaths caused by COVID-19.\"\r\n                    className=\"card-deaths\"\r\n                />\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { useGlobalContext } from \"../context\";\r\nconst Chart = () => {\r\n    const { data, dailyData, country } = useGlobalContext();\r\n    const { confirmed, recovered, deaths } = data;\r\n    const barChart = confirmed ? (\r\n        <Bar\r\n            data={{\r\n                labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n                datasets: [\r\n                    {\r\n                        label: \"People\",\r\n                        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\r\n                        data: [confirmed.value, recovered.value, deaths.value],\r\n                    },\r\n                ],\r\n            }}\r\n            options={{\r\n                legend: { display: false },\r\n                title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n        />\r\n    ) : null;\r\n    const lineChart = dailyData[0] ? (\r\n        <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()).reverse(),\r\n                datasets: [\r\n                    {\r\n                        data: dailyData.map((data) => data.confirmed).reverse(),\r\n                        label: \"Infected\",\r\n                        borderColor: \"#3333ff\",\r\n                        fill: true,\r\n                    },\r\n                    {\r\n                        data: dailyData.map((data) => data.deaths).reverse(),\r\n                        label: \"Deaths\",\r\n                        borderColor: \"red\",\r\n                        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                        fill: true,\r\n                    },\r\n                    {\r\n                        data: dailyData.map((data) => data.recovered).reverse(),\r\n                        label: \"Recovered\",\r\n                        borderColor: \"green\",\r\n                        backgroundColor: \"rgba(0, 255, 0, 0.5)\",\r\n                        fill: true,\r\n                    },\r\n                ],\r\n            }}\r\n        />\r\n    ) : null;\r\n    return <div className=\"chart-container\">{country ? barChart : lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nconst CountryPicker = () => {\r\n    const { listCountries, handleCountry } = useGlobalContext();\r\n    if (listCountries.length === 0) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    const handleCountryChange = (value) => {\r\n        handleCountry(value);\r\n    };\r\n    return (\r\n        <FormControl className=\"form-control\">\r\n            <NativeSelect\r\n                defaultValue=\"\"\r\n                onChange={(e) => handleCountryChange(e.target.value)}\r\n                className=\"select-country\"\r\n            >\r\n                <option value=\"\">United States</option>\r\n                {listCountries.map((country, i) => (\r\n                    <option key={i} value={country}>\r\n                        {country}\r\n                    </option>\r\n                ))}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Cards from \"./components/Cards\";\r\nimport Chart from \"./components/Chart\";\r\nimport CountryPicker from \"./components/CountryPicker\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <Cards />\r\n            <CountryPicker />\r\n            <Chart />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nimport \"./scss/index.scss\";\r\n\r\nReactDOM.render(\r\n    <AppProvider>\r\n        <App />\r\n    </AppProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}